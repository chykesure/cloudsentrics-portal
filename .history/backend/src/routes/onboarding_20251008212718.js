const express = require("express");
const router = express.Router();
const nodemailer = require("nodemailer");
const Onboarding = require("../models/Onboarding");

// Helper function to generate Customer ID
function generateCustomerId() {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let randomStr = "";
  for (let i = 0; i < 8; i++) {
    randomStr += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return `CS-${randomStr}`;
}

// Configure Nodemailer transporter
const transporter = nodemailer.createTransport({
  host: "smtp.hostinger.com",
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Wrap transporter.sendMail in a Promise
function sendEmail(mailOptions) {
  return new Promise((resolve, reject) => {
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) return reject(error);
      resolve(info);
    });
  });
}

// POST /api/onboarding
router.post("/", async (req, res) => {
  try {
    const { companyInfo, awsSetup, agreements = {} } = req.body;

    // Basic validation
    if (!companyInfo || !awsSetup) {
      return res.status(400).json({ error: "Missing required fields: companyInfo or awsSetup" });
    }

    // Normalize email
    if (companyInfo.companyEmail) {
      companyInfo.companyEmail = companyInfo.companyEmail.toLowerCase().trim();
    }

    // Check for duplicate email
    const existing = await Onboarding.findOne({ "companyInfo.companyEmail": companyInfo.companyEmail });
    if (existing) {
      return res.status(400).json({
        error: `Duplicate entry: The email "${companyInfo.companyEmail}" is already registered.`,
      });
    }

    // Generate Customer ID
    const customerId = generateCustomerId();
    const createdAt = new Date();

    // Save onboarding to DB
    const newOnboarding = new Onboarding({
      companyInfo,
      awsSetup,
      agreements,
      customerId,
      createdAt,
    });
    await newOnboarding.save();

    // ===============================
    // ‚úÖ User Email
    // ===============================
    const userMailOptions = {
      from: `"CloudSentrics" <${process.env.EMAIL_USER}>`,
      to: companyInfo.companyEmail,
      subject: "‚úÖ Welcome to CloudSentrics! Your Customer ID",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: auto; color: #333;">
          <div style="text-align: center;">
            <img src="https://cloudsentrics.org/assets/logo.jpg" alt="CloudSentrics Logo" style="width: 120px; margin-bottom: 20px;" />
          </div>
          <h2 style="color: #333;">Hi ${companyInfo.primaryName || "User"},</h2>
          <p style="font-size: 16px;">Thank you for completing your onboarding with CloudSentrics! We‚Äôre excited to have you on board.</p>
          <p style="font-size: 16px;">Your Customer ID is: <strong>${customerId}</strong></p>
          <div style="margin-top: 20px; font-size: 16px;">
            <p><strong>Company Name:</strong> ${companyInfo.companyName || "N/A"}</p>
            <p><strong>Email:</strong> ${companyInfo.companyEmail}</p>
            <p><strong>Phone:</strong> ${companyInfo.primaryPhone || "N/A"}</p>
          </div>
          <hr style="margin: 30px 0;">
          <p style="font-size: 12px; color: #999;">This message was auto-generated by CloudSentrics.org. Keep your Customer ID safe for future reference.</p>
        </div>
      `,
    };

    // ===============================
    // ‚úÖ Admin Email
    // ===============================
    const adminMailOptions = {
      from: `"CloudSentrics Onboarding" <${process.env.EMAIL_USER}>`,
      to: process.env.EMAIL_USER,
      subject: "üì® New Onboarding Submission",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: auto; color: #333;">
          <div style="text-align: center;">
            <img src="https://cloudsentrics.org/assets/logo.jpg" alt="CloudSentrics Logo" style="width: 120px; margin-bottom: 20px;" />
          </div>
          <h2 style="color: #333;">New Onboarding Completed</h2>
          <p style="font-size: 16px;">A new user has completed onboarding:</p>
          <div style="margin-top: 20px; font-size: 16px;">
            <p><strong>üë§ Name:</strong> ${companyInfo.primaryName || "N/A"}</p>
            <p><strong>üè¢ Company:</strong> ${companyInfo.companyName || "N/A"}</p>
            <p><strong>üìß Email:</strong> ${companyInfo.companyEmail}</p>
            <p><strong>üì± Phone:</strong> ${companyInfo.primaryPhone || "N/A"}</p>
            <p><strong>Customer ID:</strong> ${customerId}</p>
          </div>
          <hr style="margin: 30px 0;">
          <p style="font-size: 12px; color: #999;">This message was submitted via CloudSentrics onboarding system.</p>
        </div>
      `,
    };

    // Send emails in parallel (non-blocking)
    try {
      await Promise.all([sendEmail(userMailOptions), sendEmail(adminMailOptions)]);
      console.log("‚úÖ Emails sent successfully to user and admin");
    } catch (emailErr) {
      console.error("‚ö†Ô∏è Failed to send email(s):", emailErr.message);
    }

    res.status(201).json({ message: "Onboarding saved successfully", customerId });
  } catch (err) {
    console.error("‚ùå Error processing onboarding request:", err);

    // Handle Mongo duplicate key error
    if (err.code === 11000) {
      const field = Object.keys(err.keyPattern)[0];
      const value = Object.values(err.keyValue)[0];
      return res.status(400).json({
        error: `Duplicate entry: The ${field.replace("companyInfo.", "")} "${value}" is already registered.`,
      });
    }

    res.status(500).json({ error: "Internal server error", details: err.message });
  }
});

module.exports = router;
