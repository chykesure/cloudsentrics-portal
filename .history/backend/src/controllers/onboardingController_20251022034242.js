const nodemailer = require("nodemailer");
const Onboarding = require("../models/Onboarding");

// ===============================
// üìß Create mail transporter
// ===============================
const transporter = nodemailer.createTransport({
  host: "smtp.hostinger.com",
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// ===============================
// ‚úâÔ∏è Helper to send email (Promise-based)
// ===============================
const sendEmail = (mailOptions) => {
  return new Promise((resolve, reject) => {
    transporter.sendMail(mailOptions, (err, info) => {
      if (err) return reject(err);
      resolve(info);
    });
  });
};

// ===============================
// üß© Main Controller: createOnboarding
// ===============================
const createOnboarding = async (req, res) => {
  try {
    let { companyInfo, awsSetup, agreements } = req.body;

    // ‚úÖ Validation: ensure required fields exist
    if (!companyInfo || !awsSetup || !agreements) {
      return res.status(400).json({
        success: false,
        error: "Missing required fields",
      });
    }

    // ‚úÖ Normalize email
    if (companyInfo.companyEmail) {
      companyInfo.companyEmail = companyInfo.companyEmail.toLowerCase().trim();
    }

    // ‚úÖ Check for duplicate company email
    const existing = await Onboarding.findOne({
      "companyInfo.companyEmail": companyInfo.companyEmail,
    });

    if (existing) {
      return res.status(400).json({
        success: false,
        error: `Duplicate entry: The email "${companyInfo.companyEmail}" is already registered.`,
      });
    }

    // ‚úÖ Create new onboarding record
    const newOnboarding = new Onboarding({
      companyInfo,
      awsSetup,
      agreements,
    });

    await newOnboarding.save();

    // ===============================
    // üìß Email to User
    // ===============================
    const userMailOptions = {
      from: `"CloudSentrics" <${process.env.EMAIL_USER}>`,
      to: companyInfo.companyEmail,
      subject: "‚úÖ Welcome to CloudSentrics! Your Customer ID",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: auto; color: #333;">
          <div style="text-align: center;">
            <img src="https://cloudsentrics.org/assets/logo.jpg" alt="CloudSentrics Logo" style="width: 120px; margin-bottom: 20px;" />
          </div>
          <h2 style="color: #333;">Hi ${companyInfo.primaryName || "User"},</h2>
          <p style="font-size: 16px;">
            Thank you for completing your onboarding with CloudSentrics! We‚Äôre excited to have you on board.
          </p>
          <p style="font-size: 16px;">
            Your Customer ID is: <strong>${newOnboarding.customerId}</strong>
          </p>
          <div style="margin-top: 20px; font-size: 16px;">
            <p><strong>Company Name:</strong> ${companyInfo.companyName || "N/A"}</p>
            <p><strong>Email:</strong> ${companyInfo.companyEmail}</p>
            <p><strong>Phone:</strong> ${companyInfo.companyPhone || "N/A"}</p>
            <p><strong>Country:</strong> ${companyInfo.companyCountry || "N/A"}</p>
          </div>
          <hr style="margin: 30px 0;">
          <p style="font-size: 12px; color: #999;">
            This message was auto-generated by CloudSentrics.org. Keep your Customer ID safe for future reference.
          </p>
        </div>
      `,
    };

    // ===============================
    // üìß Email to Admin
    // ===============================
    const adminMailOptions = {
      from: `"CloudSentrics Onboarding" <${process.env.EMAIL_USER}>`,
      to: process.env.EMAIL_USER, // admin email
      subject: "üì® New Onboarding Submission",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: auto; color: #333;">
          <div style="text-align: center;">
            <img src="https://cloudsentrics.org/assets/logo.jpg" alt="CloudSentrics Logo" style="width: 120px; margin-bottom: 20px;" />
          </div>
          <h2 style="color: #333;">New Onboarding Completed</h2>
          <p style="font-size: 16px;">An organization has completed onboarding:</p>
          <div style="margin-top: 20px; font-size: 16px;">
            <p><strong>üë§ Name:</strong> ${companyInfo.primaryName || "N/A"}</p>
            <p><strong>üè¢ Company:</strong> ${companyInfo.companyName || "N/A"}</p>
            <p><strong>üìß Email:</strong> ${companyInfo.companyEmail}</p>
            <p><strong>üì± Phone:</strong> ${companyInfo.companyPhone || "N/A"}</p>
            <p><strong>üåç Country:</strong> ${companyInfo.companyCountry || "N/A"}</p>
            <p><strong>Customer ID:</strong> ${newOnboarding.customerId}</p>
          </div>
          <hr style="margin: 30px 0;">
          <p style="font-size: 12px; color: #999;">
            This message was submitted via CloudSentrics onboarding system.
          </p>
        </div>
      `,
    };

    // ‚úÖ Send both emails in parallel
    try {
      await Promise.all([
        sendEmail(userMailOptions),
        sendEmail(adminMailOptions),
      ]);
      console.log("‚úÖ Emails sent successfully to user and admin");
    } catch (emailErr) {
      console.error("‚ö†Ô∏è Failed to send email(s):", emailErr.message);
      // Don‚Äôt block response
    }

    // ‚úÖ Return success
    return res.status(201).json({
      success: true,
      message: "Onboarding saved successfully",
      customerId: newOnboarding.customerId,
    });

  } catch (err) {
    console.error("‚ùå Error processing onboarding request:", err);

    // üß© Handle specific error types properly

    // ‚úÖ Validation errors (schema-based)
    if (err.name === "ValidationError") {
      const messages = Object.values(err.errors).map(e => e.message);
      return res.status(400).json({
        success: false,
        error: `Validation failed: ${messages.join(", ")}`,
      });
    }

    // ‚úÖ Duplicate key (MongoDB)
    if (err.code === 11000 || err?.errorResponse?.code === 11000) {
      const field = (err.keyPattern && Object.keys(err.keyPattern)[0]) ||
                    (err.errorResponse?.keyPattern && Object.keys(err.errorResponse.keyPattern)[0]) ||
                    "field";
      const value = (err.keyValue && Object.values(err.keyValue)[0]) ||
                    (err.errorResponse?.keyValue && Object.values(err.errorResponse.keyValue)[0]) ||
                    "";

      return res.status(400).json({
        success: false,
        error: `Duplicate entry: The ${field.replace("companyInfo.", "")} "${value}" is already registered.`,
      });
    }

    // ‚úÖ Mongoose cast errors (invalid ObjectId or wrong field type)
    if (err.name === "CastError") {
      return res.status(400).json({
        success: false,
        error: `Invalid value for ${err.path}: ${err.value}`,
      });
    }

    // ‚úÖ Email service failures
    if (err.message && err.message.includes("ENOTFOUND")) {
      return res.status(502).json({
        success: false,
        error: "Email service temporarily unavailable. Please try again later.",
      });
    }

    // ‚úÖ Fallback for any other unexpected issue
    return res.status(500).json({
      success: false,
      error: "An unexpected error occurred while processing your request.",
    });
  }
};

module.exports = { createOnboarding };


